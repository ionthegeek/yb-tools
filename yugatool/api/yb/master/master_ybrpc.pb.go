// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-ybrpc. DO NOT EDIT.

package master

import "github.com/yugabyte/yb-tools/protoc-gen-ybrpc/pkg/message"

// service: yb.master.MasterService
// service: MasterService
type MasterService interface {
	TSHeartbeat(request *TSHeartbeatRequestPB) (*TSHeartbeatResponsePB, error)
	GetTabletLocations(request *GetTabletLocationsRequestPB) (*GetTabletLocationsResponsePB, error)
	CreateTable(request *CreateTableRequestPB) (*CreateTableResponsePB, error)
	IsCreateTableDone(request *IsCreateTableDoneRequestPB) (*IsCreateTableDoneResponsePB, error)
	TruncateTable(request *TruncateTableRequestPB) (*TruncateTableResponsePB, error)
	IsTruncateTableDone(request *IsTruncateTableDoneRequestPB) (*IsTruncateTableDoneResponsePB, error)
	BackfillIndex(request *BackfillIndexRequestPB) (*BackfillIndexResponsePB, error)
	LaunchBackfillIndexForTable(request *LaunchBackfillIndexForTableRequestPB) (*LaunchBackfillIndexForTableResponsePB, error)
	DeleteTable(request *DeleteTableRequestPB) (*DeleteTableResponsePB, error)
	IsDeleteTableDone(request *IsDeleteTableDoneRequestPB) (*IsDeleteTableDoneResponsePB, error)
	AlterTable(request *AlterTableRequestPB) (*AlterTableResponsePB, error)
	IsAlterTableDone(request *IsAlterTableDoneRequestPB) (*IsAlterTableDoneResponsePB, error)
	ListTables(request *ListTablesRequestPB) (*ListTablesResponsePB, error)
	GetTableLocations(request *GetTableLocationsRequestPB) (*GetTableLocationsResponsePB, error)
	GetTableSchema(request *GetTableSchemaRequestPB) (*GetTableSchemaResponsePB, error)
	GetColocatedTabletSchema(request *GetColocatedTabletSchemaRequestPB) (*GetColocatedTabletSchemaResponsePB, error)
	CreateNamespace(request *CreateNamespaceRequestPB) (*CreateNamespaceResponsePB, error)
	IsCreateNamespaceDone(request *IsCreateNamespaceDoneRequestPB) (*IsCreateNamespaceDoneResponsePB, error)
	DeleteNamespace(request *DeleteNamespaceRequestPB) (*DeleteNamespaceResponsePB, error)
	IsDeleteNamespaceDone(request *IsDeleteNamespaceDoneRequestPB) (*IsDeleteNamespaceDoneResponsePB, error)
	AlterNamespace(request *AlterNamespaceRequestPB) (*AlterNamespaceResponsePB, error)
	ListNamespaces(request *ListNamespacesRequestPB) (*ListNamespacesResponsePB, error)
	GetNamespaceInfo(request *GetNamespaceInfoRequestPB) (*GetNamespaceInfoResponsePB, error)
	CreateTablegroup(request *CreateTablegroupRequestPB) (*CreateTablegroupResponsePB, error)
	DeleteTablegroup(request *DeleteTablegroupRequestPB) (*DeleteTablegroupResponsePB, error)
	ListTablegroups(request *ListTablegroupsRequestPB) (*ListTablegroupsResponsePB, error)
	ReservePgsqlOids(request *ReservePgsqlOidsRequestPB) (*ReservePgsqlOidsResponsePB, error)
	GetYsqlCatalogConfig(request *GetYsqlCatalogConfigRequestPB) (*GetYsqlCatalogConfigResponsePB, error)
	CreateRole(request *CreateRoleRequestPB) (*CreateRoleResponsePB, error)
	AlterRole(request *AlterRoleRequestPB) (*AlterRoleResponsePB, error)
	DeleteRole(request *DeleteRoleRequestPB) (*DeleteRoleResponsePB, error)
	GrantRevokeRole(request *GrantRevokeRoleRequestPB) (*GrantRevokeRoleResponsePB, error)
	GrantRevokePermission(request *GrantRevokePermissionRequestPB) (*GrantRevokePermissionResponsePB, error)
	GetPermissions(request *GetPermissionsRequestPB) (*GetPermissionsResponsePB, error)
	CreateUDType(request *CreateUDTypeRequestPB) (*CreateUDTypeResponsePB, error)
	DeleteUDType(request *DeleteUDTypeRequestPB) (*DeleteUDTypeResponsePB, error)
	ListUDTypes(request *ListUDTypesRequestPB) (*ListUDTypesResponsePB, error)
	GetUDTypeInfo(request *GetUDTypeInfoRequestPB) (*GetUDTypeInfoResponsePB, error)
	CreateCDCStream(request *CreateCDCStreamRequestPB) (*CreateCDCStreamResponsePB, error)
	DeleteCDCStream(request *DeleteCDCStreamRequestPB) (*DeleteCDCStreamResponsePB, error)
	ListCDCStreams(request *ListCDCStreamsRequestPB) (*ListCDCStreamsResponsePB, error)
	GetCDCStream(request *GetCDCStreamRequestPB) (*GetCDCStreamResponsePB, error)
	RedisConfigSet(request *RedisConfigSetRequestPB) (*RedisConfigSetResponsePB, error)
	RedisConfigGet(request *RedisConfigGetRequestPB) (*RedisConfigGetResponsePB, error)
	ListTabletServers(request *ListTabletServersRequestPB) (*ListTabletServersResponsePB, error)
	ListMasters(request *ListMastersRequestPB) (*ListMastersResponsePB, error)
	ListMasterRaftPeers(request *ListMasterRaftPeersRequestPB) (*ListMasterRaftPeersResponsePB, error)
	GetMasterRegistration(request *GetMasterRegistrationRequestPB) (*GetMasterRegistrationResponsePB, error)
	IsMasterLeaderServiceReady(request *IsMasterLeaderReadyRequestPB) (*IsMasterLeaderReadyResponsePB, error)
	DumpState(request *DumpMasterStateRequestPB) (*DumpMasterStateResponsePB, error)
	ChangeLoadBalancerState(request *ChangeLoadBalancerStateRequestPB) (*ChangeLoadBalancerStateResponsePB, error)
	GetLoadBalancerState(request *GetLoadBalancerStateRequestPB) (*GetLoadBalancerStateResponsePB, error)
	RemovedMasterUpdate(request *RemovedMasterUpdateRequestPB) (*RemovedMasterUpdateResponsePB, error)
	SetPreferredZones(request *SetPreferredZonesRequestPB) (*SetPreferredZonesResponsePB, error)
	GetMasterClusterConfig(request *GetMasterClusterConfigRequestPB) (*GetMasterClusterConfigResponsePB, error)
	ChangeMasterClusterConfig(request *ChangeMasterClusterConfigRequestPB) (*ChangeMasterClusterConfigResponsePB, error)
	GetLoadMoveCompletion(request *GetLoadMovePercentRequestPB) (*GetLoadMovePercentResponsePB, error)
	GetLeaderBlacklistCompletion(request *GetLeaderBlacklistPercentRequestPB) (*GetLoadMovePercentResponsePB, error)
	IsLoadBalanced(request *IsLoadBalancedRequestPB) (*IsLoadBalancedResponsePB, error)
	IsLoadBalancerIdle(request *IsLoadBalancerIdleRequestPB) (*IsLoadBalancerIdleResponsePB, error)
	AreLeadersOnPreferredOnly(request *AreLeadersOnPreferredOnlyRequestPB) (*AreLeadersOnPreferredOnlyResponsePB, error)
	FlushTables(request *FlushTablesRequestPB) (*FlushTablesResponsePB, error)
	IsFlushTablesDone(request *IsFlushTablesDoneRequestPB) (*IsFlushTablesDoneResponsePB, error)
	IsInitDbDone(request *IsInitDbDoneRequestPB) (*IsInitDbDoneResponsePB, error)
	ChangeEncryptionInfo(request *ChangeEncryptionInfoRequestPB) (*ChangeEncryptionInfoResponsePB, error)
	IsEncryptionEnabled(request *IsEncryptionEnabledRequestPB) (*IsEncryptionEnabledResponsePB, error)
	SetupUniverseReplication(request *SetupUniverseReplicationRequestPB) (*SetupUniverseReplicationResponsePB, error)
	DeleteUniverseReplication(request *DeleteUniverseReplicationRequestPB) (*DeleteUniverseReplicationResponsePB, error)
	AlterUniverseReplication(request *AlterUniverseReplicationRequestPB) (*AlterUniverseReplicationResponsePB, error)
	SetUniverseReplicationEnabled(request *SetUniverseReplicationEnabledRequestPB) (*SetUniverseReplicationEnabledResponsePB, error)
	GetUniverseReplication(request *GetUniverseReplicationRequestPB) (*GetUniverseReplicationResponsePB, error)
	AddUniverseKeys(request *AddUniverseKeysRequestPB) (*AddUniverseKeysResponsePB, error)
	GetUniverseKeyRegistry(request *GetUniverseKeyRegistryRequestPB) (*GetUniverseKeyRegistryResponsePB, error)
	HasUniverseKeyInMemory(request *HasUniverseKeyInMemoryRequestPB) (*HasUniverseKeyInMemoryResponsePB, error)
	SplitTablet(request *SplitTabletRequestPB) (*SplitTabletResponsePB, error)
	DeleteTablet(request *DeleteTabletRequestPB) (*DeleteTabletResponsePB, error)
}

type MasterServiceImpl struct {
	Messenger message.Messenger
}

// TS->Master RPCs

func (s *MasterServiceImpl) TSHeartbeat(request *TSHeartbeatRequestPB) (*TSHeartbeatResponsePB, error) {
	response := &TSHeartbeatResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "TSHeartbeat", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Client->Master RPCs

func (s *MasterServiceImpl) GetTabletLocations(request *GetTabletLocationsRequestPB) (*GetTabletLocationsResponsePB, error) {
	response := &GetTabletLocationsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GetTabletLocations", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) CreateTable(request *CreateTableRequestPB) (*CreateTableResponsePB, error) {
	response := &CreateTableResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "CreateTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) IsCreateTableDone(request *IsCreateTableDoneRequestPB) (*IsCreateTableDoneResponsePB, error) {
	response := &IsCreateTableDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "IsCreateTableDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) TruncateTable(request *TruncateTableRequestPB) (*TruncateTableResponsePB, error) {
	response := &TruncateTableResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "TruncateTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) IsTruncateTableDone(request *IsTruncateTableDoneRequestPB) (*IsTruncateTableDoneResponsePB, error) {
	response := &IsTruncateTableDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "IsTruncateTableDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) BackfillIndex(request *BackfillIndexRequestPB) (*BackfillIndexResponsePB, error) {
	response := &BackfillIndexResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "BackfillIndex", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) LaunchBackfillIndexForTable(request *LaunchBackfillIndexForTableRequestPB) (*LaunchBackfillIndexForTableResponsePB, error) {
	response := &LaunchBackfillIndexForTableResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "LaunchBackfillIndexForTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) DeleteTable(request *DeleteTableRequestPB) (*DeleteTableResponsePB, error) {
	response := &DeleteTableResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "DeleteTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) IsDeleteTableDone(request *IsDeleteTableDoneRequestPB) (*IsDeleteTableDoneResponsePB, error) {
	response := &IsDeleteTableDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "IsDeleteTableDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) AlterTable(request *AlterTableRequestPB) (*AlterTableResponsePB, error) {
	response := &AlterTableResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "AlterTable", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) IsAlterTableDone(request *IsAlterTableDoneRequestPB) (*IsAlterTableDoneResponsePB, error) {
	response := &IsAlterTableDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "IsAlterTableDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) ListTables(request *ListTablesRequestPB) (*ListTablesResponsePB, error) {
	response := &ListTablesResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "ListTables", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GetTableLocations(request *GetTableLocationsRequestPB) (*GetTableLocationsResponsePB, error) {
	response := &GetTableLocationsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GetTableLocations", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GetTableSchema(request *GetTableSchemaRequestPB) (*GetTableSchemaResponsePB, error) {
	response := &GetTableSchemaResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GetTableSchema", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GetColocatedTabletSchema(request *GetColocatedTabletSchemaRequestPB) (*GetColocatedTabletSchemaResponsePB, error) {
	response := &GetColocatedTabletSchemaResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GetColocatedTabletSchema", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) CreateNamespace(request *CreateNamespaceRequestPB) (*CreateNamespaceResponsePB, error) {
	response := &CreateNamespaceResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "CreateNamespace", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) IsCreateNamespaceDone(request *IsCreateNamespaceDoneRequestPB) (*IsCreateNamespaceDoneResponsePB, error) {
	response := &IsCreateNamespaceDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "IsCreateNamespaceDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) DeleteNamespace(request *DeleteNamespaceRequestPB) (*DeleteNamespaceResponsePB, error) {
	response := &DeleteNamespaceResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "DeleteNamespace", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) IsDeleteNamespaceDone(request *IsDeleteNamespaceDoneRequestPB) (*IsDeleteNamespaceDoneResponsePB, error) {
	response := &IsDeleteNamespaceDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "IsDeleteNamespaceDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) AlterNamespace(request *AlterNamespaceRequestPB) (*AlterNamespaceResponsePB, error) {
	response := &AlterNamespaceResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "AlterNamespace", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) ListNamespaces(request *ListNamespacesRequestPB) (*ListNamespacesResponsePB, error) {
	response := &ListNamespacesResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "ListNamespaces", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GetNamespaceInfo(request *GetNamespaceInfoRequestPB) (*GetNamespaceInfoResponsePB, error) {
	response := &GetNamespaceInfoResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GetNamespaceInfo", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

// For Tablegroup:

func (s *MasterServiceImpl) CreateTablegroup(request *CreateTablegroupRequestPB) (*CreateTablegroupResponsePB, error) {
	response := &CreateTablegroupResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "CreateTablegroup", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) DeleteTablegroup(request *DeleteTablegroupRequestPB) (*DeleteTablegroupResponsePB, error) {
	response := &DeleteTablegroupResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "DeleteTablegroup", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) ListTablegroups(request *ListTablegroupsRequestPB) (*ListTablegroupsResponsePB, error) {
	response := &ListTablegroupsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "ListTablegroups", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

// For Postgres:

func (s *MasterServiceImpl) ReservePgsqlOids(request *ReservePgsqlOidsRequestPB) (*ReservePgsqlOidsResponsePB, error) {
	response := &ReservePgsqlOidsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "ReservePgsqlOids", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GetYsqlCatalogConfig(request *GetYsqlCatalogConfigRequestPB) (*GetYsqlCatalogConfigResponsePB, error) {
	response := &GetYsqlCatalogConfigResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GetYsqlCatalogConfig", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

//  Authentication and Authorization.

func (s *MasterServiceImpl) CreateRole(request *CreateRoleRequestPB) (*CreateRoleResponsePB, error) {
	response := &CreateRoleResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "CreateRole", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) AlterRole(request *AlterRoleRequestPB) (*AlterRoleResponsePB, error) {
	response := &AlterRoleResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "AlterRole", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) DeleteRole(request *DeleteRoleRequestPB) (*DeleteRoleResponsePB, error) {
	response := &DeleteRoleResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "DeleteRole", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GrantRevokeRole(request *GrantRevokeRoleRequestPB) (*GrantRevokeRoleResponsePB, error) {
	response := &GrantRevokeRoleResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GrantRevokeRole", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GrantRevokePermission(request *GrantRevokePermissionRequestPB) (*GrantRevokePermissionResponsePB, error) {
	response := &GrantRevokePermissionResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GrantRevokePermission", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GetPermissions(request *GetPermissionsRequestPB) (*GetPermissionsResponsePB, error) {
	response := &GetPermissionsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GetPermissions", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) CreateUDType(request *CreateUDTypeRequestPB) (*CreateUDTypeResponsePB, error) {
	response := &CreateUDTypeResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "CreateUDType", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) DeleteUDType(request *DeleteUDTypeRequestPB) (*DeleteUDTypeResponsePB, error) {
	response := &DeleteUDTypeResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "DeleteUDType", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) ListUDTypes(request *ListUDTypesRequestPB) (*ListUDTypesResponsePB, error) {
	response := &ListUDTypesResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "ListUDTypes", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GetUDTypeInfo(request *GetUDTypeInfoRequestPB) (*GetUDTypeInfoResponsePB, error) {
	response := &GetUDTypeInfoResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GetUDTypeInfo", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

// CDC stream RPCs.

func (s *MasterServiceImpl) CreateCDCStream(request *CreateCDCStreamRequestPB) (*CreateCDCStreamResponsePB, error) {
	response := &CreateCDCStreamResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "CreateCDCStream", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) DeleteCDCStream(request *DeleteCDCStreamRequestPB) (*DeleteCDCStreamResponsePB, error) {
	response := &DeleteCDCStreamResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "DeleteCDCStream", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) ListCDCStreams(request *ListCDCStreamsRequestPB) (*ListCDCStreamsResponsePB, error) {
	response := &ListCDCStreamsResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "ListCDCStreams", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GetCDCStream(request *GetCDCStreamRequestPB) (*GetCDCStreamResponsePB, error) {
	response := &GetCDCStreamResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GetCDCStream", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Redis Config

func (s *MasterServiceImpl) RedisConfigSet(request *RedisConfigSetRequestPB) (*RedisConfigSetResponsePB, error) {
	response := &RedisConfigSetResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "RedisConfigSet", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) RedisConfigGet(request *RedisConfigGetRequestPB) (*RedisConfigGetResponsePB, error) {
	response := &RedisConfigGetResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "RedisConfigGet", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Administrative/monitoring RPCs

func (s *MasterServiceImpl) ListTabletServers(request *ListTabletServersRequestPB) (*ListTabletServersResponsePB, error) {
	response := &ListTabletServersResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "ListTabletServers", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) ListMasters(request *ListMastersRequestPB) (*ListMastersResponsePB, error) {
	response := &ListMastersResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "ListMasters", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) ListMasterRaftPeers(request *ListMasterRaftPeersRequestPB) (*ListMasterRaftPeersResponsePB, error) {
	response := &ListMasterRaftPeersResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "ListMasterRaftPeers", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GetMasterRegistration(request *GetMasterRegistrationRequestPB) (*GetMasterRegistrationResponsePB, error) {
	response := &GetMasterRegistrationResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GetMasterRegistration", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Get the ready status from the catalog manager for this master.
// NOTE: Should be used only for unit testing purposes.

func (s *MasterServiceImpl) IsMasterLeaderServiceReady(request *IsMasterLeaderReadyRequestPB) (*IsMasterLeaderReadyResponsePB, error) {
	response := &IsMasterLeaderReadyResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "IsMasterLeaderServiceReady", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Dump master state from all the peers in the current master's quorum

func (s *MasterServiceImpl) DumpState(request *DumpMasterStateRequestPB) (*DumpMasterStateResponsePB, error) {
	response := &DumpMasterStateResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "DumpState", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) ChangeLoadBalancerState(request *ChangeLoadBalancerStateRequestPB) (*ChangeLoadBalancerStateResponsePB, error) {
	response := &ChangeLoadBalancerStateResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "ChangeLoadBalancerState", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GetLoadBalancerState(request *GetLoadBalancerStateRequestPB) (*GetLoadBalancerStateResponsePB, error) {
	response := &GetLoadBalancerStateResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GetLoadBalancerState", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) RemovedMasterUpdate(request *RemovedMasterUpdateRequestPB) (*RemovedMasterUpdateResponsePB, error) {
	response := &RemovedMasterUpdateResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "RemovedMasterUpdate", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) SetPreferredZones(request *SetPreferredZonesRequestPB) (*SetPreferredZonesResponsePB, error) {
	response := &SetPreferredZonesResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "SetPreferredZones", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GetMasterClusterConfig(request *GetMasterClusterConfigRequestPB) (*GetMasterClusterConfigResponsePB, error) {
	response := &GetMasterClusterConfigResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GetMasterClusterConfig", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) ChangeMasterClusterConfig(request *ChangeMasterClusterConfigRequestPB) (*ChangeMasterClusterConfigResponsePB, error) {
	response := &ChangeMasterClusterConfigResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "ChangeMasterClusterConfig", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GetLoadMoveCompletion(request *GetLoadMovePercentRequestPB) (*GetLoadMovePercentResponsePB, error) {
	response := &GetLoadMovePercentResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GetLoadMoveCompletion", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GetLeaderBlacklistCompletion(request *GetLeaderBlacklistPercentRequestPB) (*GetLoadMovePercentResponsePB, error) {
	response := &GetLoadMovePercentResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GetLeaderBlacklistCompletion", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) IsLoadBalanced(request *IsLoadBalancedRequestPB) (*IsLoadBalancedResponsePB, error) {
	response := &IsLoadBalancedResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "IsLoadBalanced", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) IsLoadBalancerIdle(request *IsLoadBalancerIdleRequestPB) (*IsLoadBalancerIdleResponsePB, error) {
	response := &IsLoadBalancerIdleResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "IsLoadBalancerIdle", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) AreLeadersOnPreferredOnly(request *AreLeadersOnPreferredOnlyRequestPB) (*AreLeadersOnPreferredOnlyResponsePB, error) {
	response := &AreLeadersOnPreferredOnlyResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "AreLeadersOnPreferredOnly", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) FlushTables(request *FlushTablesRequestPB) (*FlushTablesResponsePB, error) {
	response := &FlushTablesResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "FlushTables", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) IsFlushTablesDone(request *IsFlushTablesDoneRequestPB) (*IsFlushTablesDoneResponsePB, error) {
	response := &IsFlushTablesDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "IsFlushTablesDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) IsInitDbDone(request *IsInitDbDoneRequestPB) (*IsInitDbDoneResponsePB, error) {
	response := &IsInitDbDoneResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "IsInitDbDone", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) ChangeEncryptionInfo(request *ChangeEncryptionInfoRequestPB) (*ChangeEncryptionInfoResponsePB, error) {
	response := &ChangeEncryptionInfoResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "ChangeEncryptionInfo", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) IsEncryptionEnabled(request *IsEncryptionEnabledRequestPB) (*IsEncryptionEnabledResponsePB, error) {
	response := &IsEncryptionEnabledResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "IsEncryptionEnabled", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) SetupUniverseReplication(request *SetupUniverseReplicationRequestPB) (*SetupUniverseReplicationResponsePB, error) {
	response := &SetupUniverseReplicationResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "SetupUniverseReplication", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) DeleteUniverseReplication(request *DeleteUniverseReplicationRequestPB) (*DeleteUniverseReplicationResponsePB, error) {
	response := &DeleteUniverseReplicationResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "DeleteUniverseReplication", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) AlterUniverseReplication(request *AlterUniverseReplicationRequestPB) (*AlterUniverseReplicationResponsePB, error) {
	response := &AlterUniverseReplicationResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "AlterUniverseReplication", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) SetUniverseReplicationEnabled(request *SetUniverseReplicationEnabledRequestPB) (*SetUniverseReplicationEnabledResponsePB, error) {
	response := &SetUniverseReplicationEnabledResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "SetUniverseReplicationEnabled", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GetUniverseReplication(request *GetUniverseReplicationRequestPB) (*GetUniverseReplicationResponsePB, error) {
	response := &GetUniverseReplicationResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GetUniverseReplication", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) AddUniverseKeys(request *AddUniverseKeysRequestPB) (*AddUniverseKeysResponsePB, error) {
	response := &AddUniverseKeysResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "AddUniverseKeys", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) GetUniverseKeyRegistry(request *GetUniverseKeyRegistryRequestPB) (*GetUniverseKeyRegistryResponsePB, error) {
	response := &GetUniverseKeyRegistryResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "GetUniverseKeyRegistry", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) HasUniverseKeyInMemory(request *HasUniverseKeyInMemoryRequestPB) (*HasUniverseKeyInMemoryResponsePB, error) {
	response := &HasUniverseKeyInMemoryResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "HasUniverseKeyInMemory", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) SplitTablet(request *SplitTabletRequestPB) (*SplitTabletResponsePB, error) {
	response := &SplitTabletResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "SplitTablet", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *MasterServiceImpl) DeleteTablet(request *DeleteTabletRequestPB) (*DeleteTabletResponsePB, error) {
	response := &DeleteTabletResponsePB{}

	err := s.Messenger.SendMessage("yb.master.MasterService", "DeleteTablet", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}
