// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//
// Test protocol for yb RPC.

// Code generated by protoc-gen-ybrpc. DO NOT EDIT.

package rpc

import (
	"github.com/go-logr/logr"
	"github.com/yugabyte/yb-tools/protoc-gen-ybrpc/pkg/message"
)

// service: yb.rpc_test.CalculatorService
// service: CalculatorService
type CalculatorService interface {
	Add(request *AddRequestPB) (*AddResponsePB, error)
	Sleep(request *SleepRequestPB) (*SleepResponsePB, error)
	Echo(request *EchoRequestPB) (*EchoResponsePB, error)
	WhoAmI(request *WhoAmIRequestPB) (*WhoAmIResponsePB, error)
	TestArgumentsInDiffPackage(request *ReqDiffPackagePB) (*RespDiffPackagePB, error)
	Panic(request *PanicRequestPB) (*PanicResponsePB, error)
	Ping(request *PingRequestPB) (*PingResponsePB, error)
	Disconnect(request *DisconnectRequestPB) (*DisconnectResponsePB, error)
	Forward(request *ForwardRequestPB) (*ForwardResponsePB, error)
}

type CalculatorServiceImpl struct {
	Log       logr.Logger
	Messenger message.Messenger
}

func (s *CalculatorServiceImpl) Add(request *AddRequestPB) (*AddResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.rpc_test.CalculatorService", "method", "Add", "host", s.Messenger.GetHost(), "request", request)
	response := &AddResponsePB{}

	err := s.Messenger.SendMessage("yb.rpc_test.CalculatorService", "Add", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.rpc_test.CalculatorService", "method", "Add", "host", s.Messenger.GetHost(), "response", response)

	return response, nil
}

func (s *CalculatorServiceImpl) Sleep(request *SleepRequestPB) (*SleepResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.rpc_test.CalculatorService", "method", "Sleep", "host", s.Messenger.GetHost(), "request", request)
	response := &SleepResponsePB{}

	err := s.Messenger.SendMessage("yb.rpc_test.CalculatorService", "Sleep", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.rpc_test.CalculatorService", "method", "Sleep", "host", s.Messenger.GetHost(), "response", response)

	return response, nil
}

func (s *CalculatorServiceImpl) Echo(request *EchoRequestPB) (*EchoResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.rpc_test.CalculatorService", "method", "Echo", "host", s.Messenger.GetHost(), "request", request)
	response := &EchoResponsePB{}

	err := s.Messenger.SendMessage("yb.rpc_test.CalculatorService", "Echo", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.rpc_test.CalculatorService", "method", "Echo", "host", s.Messenger.GetHost(), "response", response)

	return response, nil
}

func (s *CalculatorServiceImpl) WhoAmI(request *WhoAmIRequestPB) (*WhoAmIResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.rpc_test.CalculatorService", "method", "WhoAmI", "host", s.Messenger.GetHost(), "request", request)
	response := &WhoAmIResponsePB{}

	err := s.Messenger.SendMessage("yb.rpc_test.CalculatorService", "WhoAmI", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.rpc_test.CalculatorService", "method", "WhoAmI", "host", s.Messenger.GetHost(), "response", response)

	return response, nil
}

func (s *CalculatorServiceImpl) TestArgumentsInDiffPackage(request *ReqDiffPackagePB) (*RespDiffPackagePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.rpc_test.CalculatorService", "method", "TestArgumentsInDiffPackage", "host", s.Messenger.GetHost(), "request", request)
	response := &RespDiffPackagePB{}

	err := s.Messenger.SendMessage("yb.rpc_test.CalculatorService", "TestArgumentsInDiffPackage", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.rpc_test.CalculatorService", "method", "TestArgumentsInDiffPackage", "host", s.Messenger.GetHost(), "response", response)

	return response, nil
}

func (s *CalculatorServiceImpl) Panic(request *PanicRequestPB) (*PanicResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.rpc_test.CalculatorService", "method", "Panic", "host", s.Messenger.GetHost(), "request", request)
	response := &PanicResponsePB{}

	err := s.Messenger.SendMessage("yb.rpc_test.CalculatorService", "Panic", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.rpc_test.CalculatorService", "method", "Panic", "host", s.Messenger.GetHost(), "response", response)

	return response, nil
}

func (s *CalculatorServiceImpl) Ping(request *PingRequestPB) (*PingResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.rpc_test.CalculatorService", "method", "Ping", "host", s.Messenger.GetHost(), "request", request)
	response := &PingResponsePB{}

	err := s.Messenger.SendMessage("yb.rpc_test.CalculatorService", "Ping", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.rpc_test.CalculatorService", "method", "Ping", "host", s.Messenger.GetHost(), "response", response)

	return response, nil
}

func (s *CalculatorServiceImpl) Disconnect(request *DisconnectRequestPB) (*DisconnectResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.rpc_test.CalculatorService", "method", "Disconnect", "host", s.Messenger.GetHost(), "request", request)
	response := &DisconnectResponsePB{}

	err := s.Messenger.SendMessage("yb.rpc_test.CalculatorService", "Disconnect", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.rpc_test.CalculatorService", "method", "Disconnect", "host", s.Messenger.GetHost(), "response", response)

	return response, nil
}

func (s *CalculatorServiceImpl) Forward(request *ForwardRequestPB) (*ForwardResponsePB, error) {
	s.Log.V(1).Info("sending RPC request", "service", "yb.rpc_test.CalculatorService", "method", "Forward", "host", s.Messenger.GetHost(), "request", request)
	response := &ForwardResponsePB{}

	err := s.Messenger.SendMessage("yb.rpc_test.CalculatorService", "Forward", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	s.Log.V(1).Info("received RPC response", "service", "yb.rpc_test.CalculatorService", "method", "Forward", "host", s.Messenger.GetHost(), "response", response)

	return response, nil
}
