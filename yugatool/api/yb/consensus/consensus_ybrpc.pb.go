// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-ybrpc. DO NOT EDIT.

package consensus

import "github.com/yugabyte/yb-tools/protoc-gen-ybrpc/pkg/message"

// service: yb.consensus.ConsensusService
// service: ConsensusService
// A Raft implementation.

type ConsensusService interface {
	UpdateConsensus(request *ConsensusRequestPB) (*ConsensusResponsePB, error)
	RequestConsensusVote(request *VoteRequestPB) (*VoteResponsePB, error)
	ChangeConfig(request *ChangeConfigRequestPB) (*ChangeConfigResponsePB, error)
	GetNodeInstance(request *GetNodeInstanceRequestPB) (*GetNodeInstanceResponsePB, error)
	RunLeaderElection(request *RunLeaderElectionRequestPB) (*RunLeaderElectionResponsePB, error)
	LeaderElectionLost(request *LeaderElectionLostRequestPB) (*LeaderElectionLostResponsePB, error)
	LeaderStepDown(request *LeaderStepDownRequestPB) (*LeaderStepDownResponsePB, error)
	GetLastOpId(request *GetLastOpIdRequestPB) (*GetLastOpIdResponsePB, error)
	GetConsensusState(request *GetConsensusStateRequestPB) (*GetConsensusStateResponsePB, error)
	StartRemoteBootstrap(request *StartRemoteBootstrapRequestPB) (*StartRemoteBootstrapResponsePB, error)
}

type ConsensusServiceImpl struct {
	Messenger message.Messenger
}

// Analogous to AppendEntries in Raft, but only used for followers.

func (s *ConsensusServiceImpl) UpdateConsensus(request *ConsensusRequestPB) (*ConsensusResponsePB, error) {
	response := &ConsensusResponsePB{}

	err := s.Messenger.SendMessage("yb.consensus.ConsensusService", "UpdateConsensus", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

// RequestVote() from Raft.

func (s *ConsensusServiceImpl) RequestConsensusVote(request *VoteRequestPB) (*VoteResponsePB, error) {
	response := &VoteResponsePB{}

	err := s.Messenger.SendMessage("yb.consensus.ConsensusService", "RequestConsensusVote", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Implements all of the one-by-one config change operations, including
// AddServer() and RemoveServer() from the Raft specification, as well as
// an operation to change the role of a server between VOTER and PRE_VOTER.
// An OK response means the operation was successful.

func (s *ConsensusServiceImpl) ChangeConfig(request *ChangeConfigRequestPB) (*ChangeConfigResponsePB, error) {
	response := &ChangeConfigResponsePB{}

	err := s.Messenger.SendMessage("yb.consensus.ConsensusService", "ChangeConfig", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (s *ConsensusServiceImpl) GetNodeInstance(request *GetNodeInstanceRequestPB) (*GetNodeInstanceResponsePB, error) {
	response := &GetNodeInstanceResponsePB{}

	err := s.Messenger.SendMessage("yb.consensus.ConsensusService", "GetNodeInstance", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Force this node to run a leader election.

func (s *ConsensusServiceImpl) RunLeaderElection(request *RunLeaderElectionRequestPB) (*RunLeaderElectionResponsePB, error) {
	response := &RunLeaderElectionResponsePB{}

	err := s.Messenger.SendMessage("yb.consensus.ConsensusService", "RunLeaderElection", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Notify originator about lost election, so it could reset its timeout.

func (s *ConsensusServiceImpl) LeaderElectionLost(request *LeaderElectionLostRequestPB) (*LeaderElectionLostResponsePB, error) {
	response := &LeaderElectionLostResponsePB{}

	err := s.Messenger.SendMessage("yb.consensus.ConsensusService", "LeaderElectionLost", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Force this node to step down as leader.

func (s *ConsensusServiceImpl) LeaderStepDown(request *LeaderStepDownRequestPB) (*LeaderStepDownResponsePB, error) {
	response := &LeaderStepDownResponsePB{}

	err := s.Messenger.SendMessage("yb.consensus.ConsensusService", "LeaderStepDown", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Get the latest committed or received opid on the server.

func (s *ConsensusServiceImpl) GetLastOpId(request *GetLastOpIdRequestPB) (*GetLastOpIdResponsePB, error) {
	response := &GetLastOpIdResponsePB{}

	err := s.Messenger.SendMessage("yb.consensus.ConsensusService", "GetLastOpId", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Returns the committed Consensus state.

func (s *ConsensusServiceImpl) GetConsensusState(request *GetConsensusStateRequestPB) (*GetConsensusStateResponsePB, error) {
	response := &GetConsensusStateResponsePB{}

	err := s.Messenger.SendMessage("yb.consensus.ConsensusService", "GetConsensusState", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}

// Instruct this server to remotely bootstrap a tablet from another host.

func (s *ConsensusServiceImpl) StartRemoteBootstrap(request *StartRemoteBootstrapRequestPB) (*StartRemoteBootstrapResponsePB, error) {
	response := &StartRemoteBootstrapResponsePB{}

	err := s.Messenger.SendMessage("yb.consensus.ConsensusService", "StartRemoteBootstrap", request.ProtoReflect().Interface(), response.ProtoReflect().Interface())
	if err != nil {
		return nil, err
	}

	return response, nil
}
